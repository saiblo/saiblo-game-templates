import argparse
import os
import pathlib

GAME_URL = 'https://cdn.jsdelivr.net/gh/saiblo/saiblo-game-cdn@latest/'
GAME_URL_DEV = 'https://player.dev.saiblo.net/'

# Setup parser

parser = argparse.ArgumentParser(description='Convert files generated by Cocos to make it compatible with Saiblo.')
parser.add_argument('--root', metavar='root-dir', dest='root', type=str,
                    required=True, help='source root of generated files')
parser.add_argument('--name', metavar='game-name', dest='name', type=str,
                    required=True, help='name of the game')
parser.add_argument('--dev', dest='dev', action='store_true', default=False,
                    help='whether to be deployed onto dev server')

args = parser.parse_args()

root_dir = pathlib.Path(args.root)

base_url = f'{GAME_URL_DEV if args.dev else GAME_URL}{args.name}/'

# Convert index.js

with open(root_dir / 'index.js') as f:
    index_js = f.read()

index_js = index_js \
    .replace('./application.js', f'{base_url}application.js')

with open(root_dir / 'index.js', 'w') as f:
    f.write(index_js)

# Convert application.js

with open(root_dir / 'application.js') as f:
    application_js = f.read()

application_js = application_js \
    .replace('loadBundle(name,', f'loadBundle("{base_url}assets/" + name,') \
    .replace('src/settings.json', f'{base_url}src/settings.json')

with open(root_dir / 'application.js', 'w') as f:
    f.write(application_js)

# Convert index.html

with open(root_dir / 'index.html') as f:
    index_html = f.read()

index_html = index_html \
    .replace('style.css', f'{base_url}style.css') \
    .replace('favicon.ico', f'{base_url}favicon.ico') \
    .replace('src/polyfills.bundle.js', f'{base_url}src/polyfills.bundle.js') \
    .replace('src/system.bundle.js', f'{base_url}src/system.bundle.js') \
    .replace('src/import-map.json', f'{base_url}src/import-map.json') \
    .replace('./index.js', f'{base_url}index.js')

with open(root_dir / 'player.html', 'w') as f:
    f.write(index_html)

os.remove(root_dir / 'index.html')

if not os.path.exists(root_dir / 'cover.png'):
    print('WARNING: cover.png does not exist; please manually add a cover image')
